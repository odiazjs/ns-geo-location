"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var MainWorldModel = /** @class */ (function (_super) {
    __extends(MainWorldModel, _super);
    function MainWorldModel(page) {
        var _this = _super.call(this) || this;
        _this.page = page;
        _this.prevDeltaX = 0;
        _this.prevDeltaY = 0;
        _this.draggable = _this.page.getViewById('dragBtn');
        _this.container = _this.page.getViewById('container');
        /**
         * A Map to store
         * the last dragged trail
         */
        _this.dragMap = new Array();
        _this.setInitialPosition();
        return _this;
    }
    MainWorldModel.prototype.setInitialPosition = function () {
        this.draggable.translateX = 0;
        this.draggable.translateY = 0;
    };
    MainWorldModel.prototype.onTap = function () {
        // something on tap
    };
    MainWorldModel.prototype.onPan = function (args) {
        console.log("Pan delta: [" + args.deltaX + ", " + args.deltaY + "] state: " + args.state);
        if (args.state === 1) {
            this.draggable.animate({
                scale: { x: 0.6, y: 0.6 }
            });
            this.prevDeltaX = 0;
            this.prevDeltaY = 0;
        }
        else if (args.state === 2) {
            this.dragMap.push({
                x: args.deltaX,
                y: args.deltaY
            });
            this.draggable.translateX += (args.deltaX) - this.prevDeltaX;
            this.draggable.translateY += (args.deltaY) - this.prevDeltaY;
            this.prevDeltaX = args.deltaX;
            this.prevDeltaY = args.deltaY;
            // container dimensions
            var containerWidth = this.container.width;
            var containerMeasuredWidth = this.container.getMeasuredWidth();
            var containerMeasuredHeight = this.container.getMeasuredHeight();
            console.log("Container: Width --> " + containerWidth.value + " Measured Width --> " + containerMeasuredWidth);
            // draggable dimensions
            var draggableWidth = this.draggable.width;
            var draggableMeasuredWidth = this.draggable.getMeasuredWidth();
            var draggableMeasuredHeight = this.draggable.getMeasuredHeight();
            var convFactor = draggableWidth / draggableMeasuredWidth;
            console.log("Draggable: Width --> " + draggableWidth + " Measured Width --> " + draggableMeasuredWidth);
            var edgeX = ((containerMeasuredWidth - draggableMeasuredWidth) * convFactor) / 2;
            var edgeY = ((containerMeasuredHeight - draggableMeasuredHeight) * convFactor) / 2;
            console.log("Edges: X --> " + edgeX + " Y --> " + edgeY);
            //validate edges
            if (Math.round(Math.abs(this.draggable.translateX)) > edgeX) {
                this.draggable.translateX = this.draggable.translateX < 0 ? -Math.abs(edgeX) : edgeX;
            }
            if (this.draggable.translateY < 0 && Math.round(Math.abs(this.draggable.translateY)) > edgeY) {
                this.draggable.translateY = -Math.abs(edgeY);
            }
        }
        else if (args.state === 3) {
            console.log("Translate X --> " + this.draggable.translateX + ", Translate Y --> " + this.draggable.translateY);
            this.draggable.animate({
                scale: { x: 1, y: 1 }
            });
        }
    };
    return MainWorldModel;
}(observable_1.Observable));
exports.MainWorldModel = MainWorldModel;
//# sourceMappingURL=data:application/json;base64,